#!/usr/bin/env python3
"""
Defines the setup script. This installs UCVM and downloads all the requested models. Models
can be added or deleted after the fact with the ucvm_model_manager utility. This auto-downloads new
models and can remove existing ones.

:copyright: Southern California Earthquake Center
:author:    David Gill <davidgil@usc.edu>
:created:   July 21, 2016
:modified:  October 24, 2016
"""
import os
import sys
from subprocess import Popen, PIPE

from ucvm.src.framework.ucvm import UCVM
from ucvm.src.model import get_list_of_installable_internet_models, get_list_of_installed_models, \
                           install_internet_ucvm_model, UCVM_MODELS_DIRECTORY, UCVM_LIBRARIES_DIRECTORY


def usage() -> None:
    """
    Displays the help text associated with this utility.
    :return: Nothing.
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_model_manager - UCVM Version [version]\n"
        "\n"
        "Add and remove models from UCVM with this program. Models can be downloaded through the\n"
        "web, they can be added locally, or they can be added manually (i.e. specifying the class\n"
        "and the file that conforms to the Model abstract class). This utility can also be used\n"
        "to list installed models and to also remove models as well.\n"
        "\n"
        "-l, --list:            Lists all models available and states which ones are installed.\n"
        "-a, --add model:       Downloads and installs 'model' and adds it to UCVM.\n"
        "-d, --directory dir:   Installs a model from a local directory. The directory must have\n"
        "                       the proper ucvm_model.xml descriptor. If that is not found, UCVM\n"
        "                       cannot install the model.\n"
        "-r, --remove model:    Removes 'model' from the UCVM list of models. For models\n"
        "                       downloaded and installed from the web, or copied locally, this\n"
        "                       will also delete the model code and data itself.\n"
        "-m, --manual file/cls: Manually creates an entry for model 'cls' in 'dir'. Specified\n"
        "                       like --manual /Users/johndoe/foo/model.py Bar would load class\n"
        "                       Bar(Model) from /Users/johndoe/foo/model.py.\n"
    )


def list_all_models() -> None:
    """
    Displays all the available models, including the ones online, to the user.
    :return: None
    """


def main() -> int:
    """
    The main UCVM model manager function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    try:
        options = UCVM.parse_options([
            {"short": "l", "long": "list", "value": False, "required": False},
            {"short": "a", "long": "add", "value": True, "required": False},
            {"short": "d", "long": "directory", "value": True, "required": False},
            {"short": "r", "long": "remove", "value": True, "required": False},
            {"short": "m", "long": "manual", "value": True, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    if options["add"] is not None:
        model_list = get_list_of_installable_internet_models()

        found = False

        for _, models in model_list.items():
            for item in models:
                if item["id"] == options["add"]:
                    found = item
                elif item["file"].split(".")[0] == options["add"]:
                    found = item
                    found["id"] = options["add"].strip()

        if not found:
            print("Model " + options["add"] + " was not found in the list of installable models.")
            return -1

        # We have found the model. We need to install it!
        info = install_internet_ucvm_model(found["id"], found["name"])

        # Now run the tests, through the command line so that the library paths are correct!
        environment_variable = "LD_LIBRARY_PATH"
        if sys.platform == "darwin":
            environment_variable = "DYLD_LIBRARY_PATH"

        paths = []
        if environment_variable in os.environ:
            paths = str(os.environ[environment_variable]).split(":")

        # This is Cythonized code.
        paths.append(os.path.join(UCVM_MODELS_DIRECTORY, found["id"], "lib"))
        paths.append(os.path.join(UCVM_LIBRARIES_DIRECTORY, "euclid3", "lib"))

        os.environ[environment_variable] = ":".join(paths)

        p = Popen([sys.executable] + [os.path.join(os.path.dirname(os.path.abspath(__file__)), "ucvm_run_tests"),
                                      "-m", info["id"]], env=os.environ)
        p.wait()
    else:
        model_list = get_list_of_installable_internet_models()
        installed_list = get_list_of_installed_models()

        installed_list_c = {
            "velocity": [list(dict(x).keys())[0] for x in dict(installed_list)["velocity"]],
            "elevation": [list(dict(x).keys())[0] for x in dict(installed_list)["elevation"]],
            "vs30": [list(dict(x).keys())[0] for x in dict(installed_list)["vs30"]],
            "operator": [list(dict(x).keys())[0] for x in dict(installed_list)["operator"]]
        }

        print("\nThe following are models that you have not installed but are available for\n"
              "download from SCEC:\n")

        for key, models in model_list.items():
            temp_str = ""
            for item in models:
                if item["id"] in installed_list_c[key]:
                    continue
                temp_str += "Name: " + item["name"] + "\n"
                temp_str += item["description"] + "\n"
                temp_str += "To install this model: ucvm_model_manager -a " + item["id"] + "\n\n"
            if temp_str != "":
                print(str(key).capitalize() + ":")
                print(temp_str, end="")
    return 0

if __name__ == "__main__":
    main()
