#!/usr/bin/env python
"""
Defines the utility that walks the user through plotting a depth profile.

Copyright 2017 Southern California Earthquake Center

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import sys
import xmltodict

from ucvm.src.framework.ucvm import UCVM
from ucvm.src.shared.functions import ask_and_validate, is_number, is_acceptable_value, \
    is_valid_proj4_string
from ucvm.src.shared.properties import UCVM_DEPTH, UCVM_ELEVATION, UCVM_DEFAULT_PROJECTION
from ucvm.src.visualization.depth_profile import DepthProfile


def usage() -> None:
    """
    Displays the help text associated with this utility.
    :return: Nothing.
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_plot_depth_profile - UCVM Version [version]\n"
        "\n"
        "Plots a depth profile given a series of questions.\n"
        "\n"
        "-f, --file f:          The configuration file to read from.\n"
    )


def ask_questions(test: bool) -> dict:
    """
    Asks the necessary questions.
    :return: The compiled question dictionary if successful, None if not.
    """
    answers = {
        "profile_point": {
            "x": 0,
            "y": 0,
            "z": 0,
            "depth_elev": 0,
            "projection": ""
        },
        "profile_properties": {
            "depth": 0,
            "spacing": 0,
            "properties": ""
        },
        "plot": {
            "title": ""
        },
        "cvm_list": ""
    }

    # Get list of installed models.
    installed_models = {}
    counter = 1
    for model in UCVM.get_list_of_installed_models()["velocity"]:
        if model["id"] == "1d" or model["id"] == "dataproductreader":
            continue
        installed_models[counter] = {"name": model["name"], "id": model["id"]}
        counter += 1

    print("Generating a depth profile requires various parameters to be defined (such \n"
          "as the profile point, the spacing, and so on). The following questions will guide\n"
          "you through the definition of those parameters.")

    answers["profile_point"]["x"] = \
        float(ask_and_validate("\nWhat is the X or longitudinal coordinate of the profile point?",
                               is_number, "Answer must be a number."))
    answers["profile_point"]["y"] = \
        float(ask_and_validate("What is the Y or latitudinal coordinate of the profile point?",
                               is_number, "Answer must be a number."))
    answers["profile_point"]["z"] = \
        float(ask_and_validate("What is the Z or depth/elevation coordinate of the profile point?",
                               is_number, "Answer must be a number."))

    answers["profile_point"]["depth_elev"] = \
        ask_and_validate("\nIs your Z coordinate specified as depth (default) or elevation?\n"
                         "Type 'd' or enter for depth, 'e' for elevation:", is_acceptable_value,
                         "Type the character 'd' for depth or 'e' for elevation.",
                         allowed=["d", "e", ""])

    if str(answers["profile_point"]["depth_elev"]).lower().strip() == "e":
        answers["profile_point"]["depth_elev"] = UCVM_ELEVATION
    else:
        answers["profile_point"]["depth_elev"] = UCVM_DEPTH

    answers["profile_point"]["projection"] = \
        ask_and_validate("\nIn which projection is your point specified?\n"
                         "The default for UCVM is WGS84 latitude and longitude. To accept\n"
                         "the default projection, simply hit enter:", is_valid_proj4_string,
                         "The answer must be a valid Proj.4 projection.")

    if answers["profile_point"]["projection"].strip() is "":
        answers["profile_point"]["projection"] = UCVM_DEFAULT_PROJECTION

    answers["profile_properties"]["spacing"] = float(
        ask_and_validate("\nWhat should the spacing between each layer be?", is_number)
    )
    answers["profile_properties"]["depth"] = float(
        ask_and_validate("What should the last depth or elevation be?", is_number)
    )
    answers["profile_properties"]["properties"] = \
        ask_and_validate("\nWhich property or properties (comma-separated) should be plotted?\n"
                         "Acceptable answers include Vp, Vs, density, Qp, or Qs:")

    print("\nYou must select the velocity model(s) from which you would like to retrieve this\n"
          "data. You can either enter in your model(s) as text (e.g. cvms4.usgs-noaa) or you\n"
          "can select from one of the predefined ones in the list below.")

    if not test:
        for index, name in installed_models.items():
            print(str(index) + ") " + name["name"])

    answers["cvm_list"] = ask_and_validate("\nWhich velocity model would you like?")
    try:
        int(answers["cvm_list"])
        answers["cvm_list"] = installed_models[int(answers["cvm_list"])]["id"]
    except ValueError:
        pass

    answers["plot"]["title"] = "Depth Profile at (%.2f, %.2f)" % (
        answers["profile_point"]["x"],
        answers["profile_point"]["y"]
    )

    return answers


def main() -> int:
    """
    The main UCVM depth profile function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    try:
        options = UCVM.parse_options([
            {"short": "f", "long": "file", "value": True, "required": False},
            {"short": "t", "long": "test", "value": False, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    if options["file"] is not None:
        with open(options["file"], "r") as fd:
            prof_info = xmltodict.parse(fd.read())["root"]
    else:
        prof_info = ask_questions(options["test"] is not None)
        with open("plot_depth_profile.xml", "w") as fd:
            fd.write(xmltodict.unparse({"root": prof_info}, pretty=True))

    if options["test"] is None:
        DepthProfile.from_dictionary(prof_info).plot()
    else:
        dp = DepthProfile.from_dictionary(prof_info)
        dp.extract()
        for x in dp.sd_array:
            print(x.velocity_properties.vs)
    return 0

if __name__ == "__main__":
    sys.exit(main())
