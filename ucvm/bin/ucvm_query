#!/usr/bin/env python
"""
Defines the basic ucvm_query utility. This command line program is used to extract material
properties from the models and return them in text-based format. The usage of this utility is
intended to be simple and straightforward:

$ ucvm_query -m cvms4 -a

-118 34 0

X    Y    Z    Vp (m/s)    Vs (m/s)    Density (m/kg^3)    Source    Elevation (m)    Source
Vs30 (m/s)    Source

-118 34 0 and the properties depending on the model you provided

References:
    [papers]

To query this exact model combination in the future, use:
    cvms4

:copyright: Southern California Earthquake Center
:author:    David Gill <davidgil@usc.edu>
:created:   July 6, 2016
:modified:  July 27, 2016
"""
import sys

from ucvm.src.framework.ucvm import UCVM
from ucvm.src.shared import UCVM_DEFAULT_PROJECTION, UCVM_DEPTH, UCVM_ELEVATION
from ucvm.src.shared.properties import Point, SeismicData
from ucvm.src.shared.functions import is_number

HEADER = "X           Y           Z           Vp (m/s)    Vs (m/s)    Dn (m/kg^3) Qp          " \
         "Qs          Source              Elev. (m)   Source      Vs30 (m/s)  Source"
OUTPUT_FORMAT = "%-12.4%-12.4f%-12.4f%s%s%s%s%s%s%s%s%s%s"


def usage() -> None:
    """
    Displays the help text associated with this utility.
    :return: Nothing.
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_query - UCVM Version [version]\n"
        "\n"
        "This utility queries a given velocity model (in the UCVM model syntax format) and\n"
        "returns its material properties on the command line. Returned material properties\n"
        "are configured by the velocity model, unless specifically overridden by the user.\n"
        "All points provided to this utility are expected to be in WGS84 latitude, longitude\n"
        "format, unless stated otherwise through the '-p' option.\n"
        "\n"
        "-m, --model m:         The unique model identifier, m. For example, 'CVM-S4' or \n"
        "                       'CVM-S4.26.M01'. If the model is not registered, an error will\n"
        "                       be thrown.\n"
        "-i, --input f:         Optional. An input file, i, from which all the points should be\n"
        "                       read. If no file provided, the points will be read from the\n"
        "                       command line.\n"
        "-o, --output o:        Optional. The output file, o, to which all the material\n"
        "                       properties should be written.\n"
        "-p, --projection p:    Optional. Specifies a projection, p, in Proj.4 format, in which\n"
        "                       all points inputted to this utility are specified.\n"
        "-a, --all-meta:        Optional. Specifies that ucvm_query should output all the\n"
        "                       metadata associated with the query. That is, it should output\n"
        "                       the references that support the query and so forth."
    )


def parse_line(line: str, depth_elev: int=UCVM_DEPTH,
               projection: str=UCVM_DEFAULT_PROJECTION) -> SeismicData:
    """
    Given an inputted line and a depth setting (if applicable) and a projection (if applicable),
    return the SeismicData class constructed with the data in the UCVM default projection.
    :param str line: The input line as a string.
    :param int depth_elev: UCVM.DEPTH or UCVM.ELEVATION depending on the query type.
    :param str projection: The projection as a Proj.4 string if not the default one.
    :return: A SeismicData object containing the necessary information for the query.
    """
    components = line.split()

    coordinates = {
        "x": 0,
        "y": 1,
        "z": 2
    }

    if not len(components) == 3:
        raise ValueError("Line %s cannot be parsed. Incorrect number of values." % line.strip())

    for key in coordinates.keys():
        if not is_number(components[coordinates[key]]):
            raise ValueError("Line %s cannot be parsed. Part %s is not a number." %
                             (line.strip(), components[coordinates[key]].strip()))
        coordinates[key] = float(components[coordinates[key]])

    return SeismicData(Point(coordinates["x"], coordinates["y"], coordinates["z"], depth_elev,
                             {}, projection))


def generate_output_line(seismicdata: SeismicData) -> str:
    """
    Given a SeismicData object, we need to output the material properties as a string.
    :param SeismicData seismicdata: The SeismicData object from which the line should be generated.
    :return: The line containing all the material property information outputted correctly.
    """
    if seismicdata.velocity_properties is not None:
        vp_out = "%-12.4f" % seismicdata.velocity_properties.vp \
                 if seismicdata.velocity_properties.vp is not None else "N/A".ljust(12)
        vs_out = "%-12.4f" % seismicdata.velocity_properties.vs \
                 if seismicdata.velocity_properties.vs is not None else "N/A".ljust(12)
        dn_out = "%-12.4f" % seismicdata.velocity_properties.density \
                 if seismicdata.velocity_properties.density is not None else "N/A".ljust(12)
        qp_out = "%-12.4f" % seismicdata.velocity_properties.qp \
                 if seismicdata.velocity_properties.qp is not None else "N/A".ljust(12)
        qs_out = "%-12.4f" % seismicdata.velocity_properties.qs \
                 if seismicdata.velocity_properties.qs is not None else "N/A".ljust(12)
    else:
        vp_out = "N/A".ljust(12)
        vs_out = "N/A".ljust(12)
        dn_out = "N/A".ljust(12)
        qp_out = "N/A".ljust(12)
        qs_out = "N/A".ljust(12)

    vy_source = seismicdata.velocity_properties.vp_source.ljust(20)[0:19] + " " \
                if seismicdata.velocity_properties is not None else "N/A".ljust(20)[0:20]
    el_out = "%-12.4f" % seismicdata.elevation_properties.elevation \
             if seismicdata.elevation_properties.elevation is not None else "N/A".ljust(12)
    el_source = seismicdata.elevation_properties.elevation_source.ljust(12) \
                if seismicdata.elevation_properties.elevation is not None else "N/A".ljust(12)
    vs30_out = "%-12.4f" % seismicdata.vs30_properties.vs30 \
               if seismicdata.vs30_properties.vs30 is not None else "N/A".ljust(12)
    vs30_source = seismicdata.vs30_properties.vs30_source.ljust(12) \
                  if seismicdata.vs30_properties.vs30 is not None else "N/A".ljust(12)

    return "%-12.4f%-12.4f%-12.4f" % \
           (seismicdata.original_point.x_value, seismicdata.original_point.y_value,
            seismicdata.original_point.z_value) + \
           vp_out + vs_out + dn_out + qp_out + qs_out + vy_source + el_out + el_source + \
           vs30_out + vs30_source


def main() -> int:
    """
    The main UCVM query function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    try:
        options = UCVM.parse_options([
            {"short": "m", "long": "model", "value": True, "required": True},
            {"short": "i", "long": "output", "value": True, "required": False},
            {"short": "o", "long": "input", "value": True, "required": False},
            {"short": "p", "long": "projection", "value": True, "required": False},
            {"short": "a", "long": "all-meta", "value": False, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    lines = []
    points = []

    options_internal = {
        "depth": UCVM_DEPTH
    }

    if ".depth" in options["model"]:
        options_internal = {"depth": UCVM_DEPTH}
    elif ".elevation" in options["model"]:
        options_internal = {"depth": UCVM_ELEVATION}

    # Go through all the options and set everything up correctly.
    if options["input"] is not None:
        with open(options["input"]) as the_file:
            lines.append(the_file.readline())
    else:
        for line in sys.stdin:
            lines.append(line)

    for line in lines:
        try:
            points.append(parse_line(line, options_internal["depth"],
                                     options["projection"]))
        except ValueError as v_err:
            print("[ERROR]: " + str(v_err))

    UCVM.query(points, options["model"])

    print(HEADER)

    if options["output"] is not None:
        with open(options["output"]) as the_file:
            the_file.writelines([""])
    else:
        for point in points:
            print(generate_output_line(point))

    if options["all-meta"] is not None:
        print("Data was retrieved from:\n")
        for model in model_list:
            print(model)

    return 0

if __name__ == "__main__":
    sys.exit(main())
