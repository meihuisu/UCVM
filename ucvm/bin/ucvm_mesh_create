#!/usr/bin/env python
"""
Single-core AWP and UCVM mesh generation.

Generates a binary float mesh from a given model string. This utility can read in legacy UCVM
15.10.0 and below configuration files as well as use the new XML configuration format. If no
file-format is specified, then this utility will ask a series of prompts before generating the
mesh.

Copyright 2017 Southern California Earthquake Center

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
# Python Imports
import sys
import time

# Package Imports
import xmltodict

# UCVM Imports
from ucvm.src.framework.ucvm import UCVM
from ucvm.src.framework.awp_mesh import ask_questions, mesh_extract_single


def usage() -> None:
    """
    Displays the help text associated with this utility.

    Returns:
        None
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_mesh_create - UCVM Version [version]\n"
        "\n"
        "Creates a mesh or a mesh configuration file with the given parameters. This generates\n"
        "a binary float mesh that is compatible with wave propagation code such as AWP-ODC. If\n"
        "your wave propagation code (such as Hercules) uses the e-tree format, then you need\n"
        "to use the ucvm_etree_create or ucvm_etree_create_mpi utility.\n"
        "\n"
        "-c, --config-only c:   Generates the XML-style configuration file only. No mesh will be\n"
        "                       made at the end of the questions.\n"
        "-f, --file f:          Specifies the configuration file from which this utility should read.\n"
        "-s, --slices s:        Extracts one or more slices. If slice is a number, like '1' or '5',\n"
        "                       that slice is extracted. If slice is a range, like 1-5, then slices\n"
        "                       1, 2, 3, 4, and 5, will be extracted. Slice 1 is the surface.\n"
        "-i, --interval i:      Extracts a percentage of the mesh. If i is '0-10', for example, then\n"
        "                       the first 10% of the mesh will be extracted. If i is '50-75' then\n"
        "                       the third quarter of the mesh will be extracted.\n"
    )


def main() -> int:
    """
    The main UCVM mesh create function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    start_time = time.time()

    try:
        options = UCVM.parse_options([
            {"short": "c", "long": "config-only", "value": False, "required": False},
            {"short": "f", "long": "file", "value": True, "required": False},
            {"short": "s", "long": "slices", "value": True, "required": False},
            {"short": "i", "long": "interval", "value": True, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    if options["config-only"] is not None:
        ask_questions()
        return 0

    if options["file"] is not None:
        with open(options["file"], "r") as fd:
            mesh_information = xmltodict.parse(fd.read())["root"]
    else:
        mesh_information = ask_questions()

    mesh_extract_single(mesh_information, options["slices"], options["interval"])

    print("\nMesh extraction finished in %s seconds" % (time.time() - start_time))

if __name__ == "__main__":
    sys.exit(main())
