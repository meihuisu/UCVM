#!/usr/bin/env python
"""
Single-core AWP and UCVM mesh generation.

Generates a binary float mesh from a given model string. This utility can read in legacy UCVM
15.10.0 and below configuration files as well as use the new XML configuration format. If no
file-format is specified, then this utility will ask a series of prompts before generating the
mesh.

Copyright:
    Southern California Earthquake Center

Developer:
    David Gill <davidgil@usc.edu>
"""
# Python Imports
import sys
import time

# Package Imports
import xmltodict

# UCVM Imports
from ucvm.src.framework.ucvm import UCVM
from ucvm.src.framework.awp_mesh import ask_questions, mesh_extract_single


def usage() -> None:
    """
    Displays the help text associated with this utility.

    Returns:
        None
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_mesh_create - UCVM Version [version]\n"
        "\n"
        "Creates a mesh or a mesh configuration file with the given parameters. This generates\n"
        "a binary float mesh that is compatible with wave propagation code such as AWP-ODC. If\n"
        "your wave propagation code (such as Hercules) uses the e-tree format, then you need\n"
        "to use the ucvm_etree_create or ucvm_etree_create_mpi utility.\n"
        "\n"
        "-c, --config-only c:   Generates the XML-style configuration file only. No mesh will be\n"
        "                       made at the end of the questions.\n"
        "-f, --file f:          Specifies the configuration file from which this utility should\n"
        "                       read. Note that this auto-detects a legacy (before UCVM 15.10.0)\n"
        "                       style configuration file vs. the new XML format.\n"
    )


def main() -> int:
    """
    The main UCVM mesh create function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    start_time = time.time()

    try:
        options = UCVM.parse_options([
            {"short": "c", "long": "config-only", "value": False, "required": False},
            {"short": "f", "long": "file", "value": True, "required": False},
            {"short": "s", "long": "slices", "value": True, "required": False},
            {"short": "i", "long": "interval", "value": True, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    if options["config-only"] is not None:
        ask_questions()
        return 0

    if options["file"] is not None:
        with open(options["file"], "r") as fd:
            mesh_information = xmltodict.parse(fd.read())["root"]
    else:
        mesh_information = ask_questions()

    mesh_extract_single(mesh_information)

    print("\nMesh extraction finished in %s seconds" % (time.time() - start_time))

if __name__ == "__main__":
    sys.exit(main())
