#!/usr/bin/env python3
"""
Automated internal tool to create npy test data.

This is an internal tool that is used to query the original velocity models and generate test
data which is then saved to disk. That data is used by UCVM's run_acceptance_test to verify that
the models are returning the same material properties on the user's computer as they do from
their original source code.

Copyright 2017 Southern California Earthquake Center

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
# Python Imports
import sys
import os
import math
import xmltodict
import numpy as np
from subprocess import Popen, PIPE, STDOUT

SPACING = 0.05
DEPTH = 5000


def main() -> int:
    """
    The main function which is used to create the test data.

    Returns:
        0 if successful. Raises an error code otherwise, if not.
    """
    # Go through each model and get the coverage region.
    path = os.path.abspath(os.path.join("..", "..", "models", "velocity"))

    for item in os.listdir(path):
        # Don't process the .DS_Store file.
        if item != "cvms426":
            continue

        print("Creating test data for %s" % item)

        with open(os.path.join(path, item, "ucvm_model.xml"), "r") as fd:
            xml_data = xmltodict.parse(fd.read())

            if "bottom-left" not in xml_data["root"]["information"]["coverage"]:
                continue

            metadata = {
                "bottom-left": {
                    "e": float(xml_data["root"]["information"]["coverage"]["bottom-left"]["e"]),
                    "n": float(xml_data["root"]["information"]["coverage"]["bottom-left"]["n"])
                },
                "num_x": math.floor(
                    (float(xml_data["root"]["information"]["coverage"]["top-right"]["e"]) -
                     float(xml_data["root"]["information"]["coverage"]["bottom-left"]["e"])) /
                    SPACING
                ),
                "num_y": math.floor(
                    (float(xml_data["root"]["information"]["coverage"]["top-right"]["n"]) -
                     float(xml_data["root"]["information"]["coverage"]["bottom-left"]["n"])) /
                    SPACING
                ),
                "num_z": math.floor(
                    float(xml_data["root"]["information"]["coverage"]["depth"]) / DEPTH
                )
            }

        # Now that we know the region info we can extract the data.
        metadata["data"] = np.zeros((metadata["num_x"] + 1, metadata["num_y"] + 1,
                                     metadata["num_z"] + 1, 3))

        query_list = []
        for i in range(metadata["num_z"] + 1):
            for j in range(metadata["num_y"] + 1):
                for k in range(metadata["num_x"] + 1):
                    query_list.append((
                        metadata["bottom-left"]["e"] + (SPACING * k),
                        metadata["bottom-left"]["n"] + (SPACING * j),
                        i * DEPTH
                    ))

        query_text_all = "\n".join(["%.2f %.2f %.2f" % (x[0], x[1], x[2]) for x in query_list])

        # Generate test data from UCVM.
        if item == "bayarea" or item == "cca06" or item == "cvms426m01" or item == "cvms426":
            temp_wd = os.getcwd()

            item_to_use = item
            if item == "bayarea":
                item_to_use = "cencal"
            elif item == "cvms426m01":
                item_to_use = "cvmsi"
            elif item == "cvms426":
                item_to_use = "cvms5"
            elif item == "cca06":
                item_to_use = "cca"

            os.chdir("/Users/davidgil/ucvm-15.10.0-2/bin")
            proc = Popen(["./ucvm_query", "-f", "../conf/ucvm.conf", "-m", item_to_use],
                         stdout=PIPE, stdin=PIPE, stderr=STDOUT)
            output = proc.communicate(input=query_text_all.encode("ASCII"))[0].decode("ASCII")
            output = output.split("\n")[1:]
            os.chdir(temp_wd)
            counter = 0
            for i in range(metadata["num_z"] + 1):
                for j in range(metadata["num_y"] + 1):
                    for k in range(metadata["num_x"] + 1):
                        metadata["data"][k][j][i][0] = output[counter].split()[6]
                        metadata["data"][k][j][i][1] = output[counter].split()[7]
                        metadata["data"][k][j][i][2] = output[counter].split()[8]
                        counter += 1
            np.save("test_" + item, metadata["data"])

        # Generate test data for CVM-S4.
        if item == "cvms4":
            txt_cvms4 = str(len(query_list)) + "\n"
            txt_cvms4 += "\n".join(["%.2f %.2f %.2f" % (x[1], x[0], x[2]) for x in query_list])
            temp_wd = os.getcwd()
            os.chdir("/Users/davidgil/Downloads/cvms/src")
            proc = Popen(["/Users/davidgil/Downloads/cvms/src/cvms_txt"],
                         stdout=PIPE, stdin=PIPE, stderr=STDOUT)
            output = proc.communicate(input=txt_cvms4.encode("ASCII"))[0].decode("ASCII")
            output = output.split("\n")
            os.chdir(temp_wd)
            counter = 0
            for i in range(metadata["num_z"] + 1):
                for j in range(metadata["num_y"] + 1):
                    for k in range(metadata["num_x"] + 1):
                        metadata["data"][k][j][i][0] = output[counter + 1].split()[3]
                        metadata["data"][k][j][i][1] = output[counter + 1].split()[4]
                        metadata["data"][k][j][i][2] = output[counter + 1].split()[5]
                        counter += 1
            np.save("test_cvms4", metadata["data"])

        # Generate test data for CVM-H 15.10.0.
        if item == "cvmh1510":
            temp_wd = os.getcwd()
            os.chdir("/Users/davidgil/Downloads/cvmh-15.1.0/model")
            proc = Popen(["../src/vx_lite", "-z", "dep", "-g"],
                         stdout=PIPE, stdin=PIPE, stderr=STDOUT)
            output = proc.communicate(input=query_text_all.encode("ASCII"))[0].decode("ASCII")
            output = output.split("\n")
            os.chdir(temp_wd)
            counter = 0
            for i in range(metadata["num_z"] + 1):
                for j in range(metadata["num_y"] + 1):
                    for k in range(metadata["num_x"] + 1):
                        metadata["data"][k][j][i][0] = output[counter].split()[16]
                        metadata["data"][k][j][i][1] = output[counter].split()[17]
                        metadata["data"][k][j][i][2] = output[counter].split()[18]
                        counter += 1
            np.save("test_cvmh", metadata["data"])

    return 0

if __name__ == "__main__":
    sys.exit(main())
