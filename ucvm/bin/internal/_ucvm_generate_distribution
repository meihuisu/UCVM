#!/usr/bin/env python
"""
This command creates a source distribution suitable for upload to a server. It packages all the
models, relevant source distribution, setup.py, etc. and creates the tar.gz and ucv files, as
well as generating the model_list.xml file.

:copyright: Southern California Earthquake Center
:author:    David Gill <davidgil@usc.edu>
:created:   July 26, 2016
:modified:  July 26, 2016
"""
import sys
import os
import xmltodict

from subprocess import call

from ucvm.src.framework.ucvm import UCVM
from ucvm.src.shared import parse_xmltodict_one_or_many

BASE_FOLDERS = ["dem", "velocity", "vs30"]


def usage() -> None:
    """
    Displays the help text associated with this utility.
    :return: Nothing.
    """
    UCVM.print_with_replacements(
        "\n"
        "_ucvm_generate_distribution - UCVM Version [version]\n"
        "\n"
        "This utility generates a distribution suitable for upload to hypocenter.usc.edu.\n"
        "\n"
        "-b, --base-dir b:      The base directory (usually the GitHub base dir).\n"
        "-o, --output-dir o:    The output directory to contain all the files for upload.\n"
    )


def package_and_zip_models(directory: str, output_dir: str) -> bool:
    """
    Package and "UCV" models for distribution.
    :param directory: The base directory in which to find the models.
    :param output_dir: The output directory to which these files should be written.
    :return: True if the function was successful, false otherwise.
    """
    models = []

    for folder in BASE_FOLDERS:
        for model in os.listdir(os.path.join(directory, folder)):
            if os.path.exists(os.path.join(directory, folder, model, "ucvm_model.xml")):
                print("Packaging model " + model + "...")
                call(["tar", "-cvzf", os.path.join(output_dir, "models", model + ".ucv"),
                      "-C", os.path.join(directory, folder, model), "."])

                with open(os.path.join(directory, folder, model, "ucvm_model.xml"), "r") as fd:
                    xml_doc = xmltodict.parse(fd.read())

                models.append({
                    "name": parse_xmltodict_one_or_many(xml_doc, "root/information/identifier"),
                    "type": parse_xmltodict_one_or_many(xml_doc, "root/information/type"),
                    "file": model + ".ucv",
                    "description": parse_xmltodict_one_or_many(xml_doc,
                                                               "root/information/description"),
                    "coverage": parse_xmltodict_one_or_many(xml_doc, "root/information/coverage")
                })
            else:
                print("No ucvm_model.xml found for model " + model + ". Skipping model!")

    print("Writing out XML document...")

    with open(os.path.join(output_dir, "model_list.xml"), "w") as fd:
        models = {"root": {"model": models}}
        fd.write(xmltodict.unparse(models, pretty=True))

    return True


def main() -> int:
    """
    The main generate distribution function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    try:
        options = UCVM.parse_options([
            {"short": "b", "long": "base-dir", "value": True, "required": True},
            {"short": "o", "long": "output-dir", "value": True, "required": True}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    try:
        os.mkdir(os.path.join(options["output-dir"], "models"))
    except FileExistsError:
        pass

    package_and_zip_models(
        os.path.join(options["base-dir"], "ucvm/models"),
        options["output-dir"]
    )

    print("All done!")

    return 0

if __name__ == "__main__":
    sys.exit(main())
