#!/usr/bin/env python
"""
Single-core E-tree generation.

Generates an e-tree from a given model string. This utility can read in legacy UCVM
15.10.0 and below configuration files as well as use the new XML configuration format. If no
file-format is specified, then this utility will ask a series of prompts before generating the
mesh.

Copyright:
    Southern California Earthquake Center

Developer:
    David Gill <davidgil@usc.edu>
"""
# Python Imports
import sys
import time

# Package Imports
import xmltodict

# UCVM Imports
from ucvm.src.framework.ucvm import UCVM
from ucvm.src.framework.etree import ask_questions, etree_extract_single


def usage() -> None:
    """
    Displays the help text associated with this utility.

    Returns:
        None
    """
    UCVM.print_with_replacements(
        "\n"
        "ucvm_etree_create - UCVM Version [version]\n"
        "\n"
        "Creates an e-tree or e-tree configuration file with the given parameters. This generates\n"
        "an e-tree that is compatible with the Hercules wave propagation code. If\n"
        "your wave propagation code (such as AWP) uses the IJK-12 format, then you need\n"
        "to use the ucvm_mesh_create or ucvm_mesh_create_mpi utility.\n"
        "\n"
        "-c, --config-only c:   Generates the XML-style configuration file only. No e-tree will\n"
        "                       be made at the end of the questions.\n"
        "-f, --file f:          Specifies the configuration file from which this utility should read.\n"
        "-r, --rows r:          Extracts one or more rows of the etree. If r is a number like '1'\n"
        "                       just that row will be extracted. If r is an interval like '1-5'\n"
        "                       those rows (1, 2, 3, 4, 5 e.g.) inclusive will be extracted.\n"
        "-i, --interval i:      Extracts exactly the interval desired. The parameter must be\n"
        "                       specified as row,column-row,column. E.g. the parameters\n"
        "                       1,5-10,12 would extract row 1, column 5 through row 10,\n"
        "                       column 12 inclusive."
    )


def main() -> int:
    """
    The main UCVM e-tree create function.
    :return: 0 if successful. Raises an error code otherwise, if not.
    """
    start_time = time.time()

    try:
        options = UCVM.parse_options([
            {"short": "c", "long": "config-only", "value": True, "required": False},
            {"short": "f", "long": "file", "value": True, "required": False},
            {"short": "r", "long": "rows", "value": True, "required": False},
            {"short": "i", "long": "interval", "value": True, "required": False}
        ], usage)
    except ValueError as v_err:
        print("[ERROR]: " + str(v_err) + "\n")
        sys.exit(-1)

    if options["config-only"] is not None:
        with open(options["config-only"], "w") as fd:
            fd.write(xmltodict.unparse({"root": ask_questions()}, pretty=True))
        print(
            "\n"
            "Your e-tree configuration file has been saved to " + options["config-only"] + ".\n"
            "\n"
            "To extract a mesh with your new configuration, run\n"
            "ucvm_etree_create -f " + options["config-only"] + ""
            "\n"
        )
        return 0

    if options["file"] is not None:
        with open(options["file"], "r") as fd:
            etree_information = xmltodict.parse(fd.read())["root"]
    else:
        etree_information = ask_questions()

    etree_extract_single(etree_information, options["rows"], options["interval"])

    print("\nE-tree extraction finished in %s seconds" % (time.time() - start_time))

if __name__ == "__main__":
    sys.exit(main())
